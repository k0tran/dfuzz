# This file is for string templates

CORE = \
'''\
/// This file is autogenerated

#include "{class_header}"

#include <cstdint>
#include <iterator> // for std::size

// Constructor section

struct ConstrData {{
    size_t arg_size;
    {class_name} (*fn)(const uint8_t *);
}};

{constr_fns}
const ConstrData constr_list[] = {{
{constr_list}}};
constexpr size_t constr_size = std::size(constr_list);

// Method section

struct MethodData {{
    size_t arg_size;
    void (*fn)({class_name} *, const uint8_t *);
}};

{method_fns}
const MethodData method_list[] = {{
{method_list}}};
constexpr size_t method_size = std::size(method_list);


extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {{
    // supported up to 255 constructors and methods

    // empty string
    if (size == 0)
        return 0;

    // get constr id
    size_t args = 0;
    auto c = constr_list[data[args] % constr_size];
    args += 1;

    // check if we have enough space for arguments
    if (args + c.arg_size > size)
        return 0;
    
    // call constructor
    auto obj = c.fn(data + args);
    args += c.arg_size;

    // check if we have enough space for method id
    if (args >= size)
        return 0;

    // get method
    auto m = method_list[data[args] % method_size];
    args += 1;

    while (args + m.arg_size <= size) {{
        // call method
        m.fn(&obj, data + args);
        args += m.arg_size;

        // check if we have space for another method
        if (args >= size)
            return 0;

        // get new method
        m = method_list[data[args] % method_size];
        args += 1;
    }}
    
    return 0;
}}
'''

CONSTR_FN_NOARGS = \
'''\
{class_name} constr_{i}(const uint8_t *data) {{
    return {class_name}();
}}
'''

CONSTR_FN = \
'''\
{class_name} constr_{i}(const uint8_t *data) {{
    size_t size = 0;

    // args
{fn_args}
    // call
    return {class_name}({call_args});
}}
'''

FN_ARG = \
'''\
    {type} *arg_{i} = reinterpret_cast<{type} *>(data + size);
    size += sizeof({type});
'''

FN_CALL_ARG = '*arg_{i}, '

CONSTR_LIST_ITEM = \
'''\
    {{
        .arg_size = 0{size_args},
        .fn = constr_{i}
    }},
'''

SIZE_ARG = ' + sizeof({type})'

METHOD_FN_NOARGS = \
'''\
void method_{method_name}({class_name} *obj, const uint8_t *data) {{
    // call
    obj->{method_name}();
}}
'''

METHOD_FN = \
'''\
void method_{method_name}({class_name} *obj, const uint8_t *data) {{
    size_t size = 0;

    // args
{fn_args}
    // call
    obj->{method_name}({call_args});
}}
'''

METHOD_LIST_ITEM = \
'''\
    {{
        .arg_size = 0{size_args},
        .fn = method_{method_name},
    }},
'''
